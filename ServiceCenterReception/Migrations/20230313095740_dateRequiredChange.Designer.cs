// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServiceCenterReception.Data;

#nullable disable

namespace ServiceCenterReception.Migrations
{
    [DbContext(typeof(serviceCenterDbContext))]
    [Migration("20230313095740_dateRequiredChange")]
    partial class dateRequiredChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ServiceCenterReception.Entity.CustomerProfile", b =>
                {
                    b.Property<long>("customerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("customerId"));

                    b.Property<DateTime>("DOB")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DOM")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<long>("addressPinCode")
                        .HasColumnType("bigint");

                    b.Property<string>("customerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("dueInMonths")
                        .HasColumnType("integer");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("lastServiceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("mobileNumber")
                        .HasColumnType("bigint");

                    b.HasKey("customerId");

                    b.ToTable("customerProfiles");
                });

            modelBuilder.Entity("ServiceCenterReception.Entity.FinalServiceBill", b =>
                {
                    b.Property<long>("finalServiceBillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("finalServiceBillId"));

                    b.Property<long>("amountPaid")
                        .HasColumnType("bigint");

                    b.Property<long>("customerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("dateTimeGenerated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("discountAmount")
                        .HasColumnType("bigint");

                    b.Property<long>("discountPercentage")
                        .HasColumnType("bigint");

                    b.Property<long>("totalAmount")
                        .HasColumnType("bigint");

                    b.Property<long>("vehicleServiceDetailId")
                        .HasColumnType("bigint");

                    b.HasKey("finalServiceBillId");

                    b.ToTable("finalServiceBills");
                });

            modelBuilder.Entity("ServiceCenterReception.Entity.ServiceTasksMaster", b =>
                {
                    b.Property<int>("taskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("taskId"));

                    b.Property<long>("chargesInRuppes")
                        .HasColumnType("bigint");

                    b.Property<string>("remarks")
                        .HasColumnType("text");

                    b.Property<string>("taskServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("taskId");

                    b.ToTable("serviceTasksMasters");
                });

            modelBuilder.Entity("ServiceCenterReception.Entity.VehicleDetails", b =>
                {
                    b.Property<long>("vehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("vehicleId"));

                    b.Property<long>("customerId")
                        .HasColumnType("bigint");

                    b.Property<string>("vehicleNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("vehicleType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("vehicleId");

                    b.HasIndex("customerId");

                    b.ToTable("vehicleDetails");
                });

            modelBuilder.Entity("ServiceCenterReception.Entity.VehicleServiceDetail", b =>
                {
                    b.Property<long>("vehicleServiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("vehicleServiceDetailId"));

                    b.Property<long?>("VehicleServiceRecieveDeliveryId")
                        .HasColumnType("bigint");

                    b.Property<long>("customerId")
                        .HasColumnType("bigint");

                    b.Property<long>("vehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("vehicleServiceDetailId");

                    b.HasIndex("VehicleServiceRecieveDeliveryId");

                    b.HasIndex("customerId");

                    b.HasIndex("vehicleId");

                    b.ToTable("vehicleServiceDetails");
                });

            modelBuilder.Entity("ServiceCenterReception.Entity.VehicleServiceRecieveDelivery", b =>
                {
                    b.Property<long>("VehicleServiceRecieveDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("VehicleServiceRecieveDeliveryId"));

                    b.Property<DateTime>("vehicleDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("vehicleReceiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("VehicleServiceRecieveDeliveryId");

                    b.ToTable("vehicleServiceRecieveDeliveries");
                });

            modelBuilder.Entity("ServiceCenterReception.Entity.VehicleServiceTaskCompletedList", b =>
                {
                    b.Property<long>("taskServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("taskServiceId"));

                    b.Property<long>("customerId")
                        .HasColumnType("bigint");

                    b.Property<string>("remarks")
                        .HasColumnType("text");

                    b.Property<long>("taskServiceCharges")
                        .HasColumnType("bigint");

                    b.Property<string>("taskServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("vehicleServiceDetailId")
                        .HasColumnType("bigint");

                    b.HasKey("taskServiceId");

                    b.HasIndex("vehicleServiceDetailId");

                    b.ToTable("vehicleServiceTaskCompletedLists");
                });

            modelBuilder.Entity("ServiceCenterReception.Entity.VehicleDetails", b =>
                {
                    b.HasOne("ServiceCenterReception.Entity.CustomerProfile", "CustomerProfile")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerProfile");
                });

            modelBuilder.Entity("ServiceCenterReception.Entity.VehicleServiceDetail", b =>
                {
                    b.HasOne("ServiceCenterReception.Entity.VehicleServiceRecieveDelivery", "VehicleServiceRecieveDelivery")
                        .WithMany()
                        .HasForeignKey("VehicleServiceRecieveDeliveryId");

                    b.HasOne("ServiceCenterReception.Entity.CustomerProfile", "CustomerProfile")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceCenterReception.Entity.VehicleDetails", "VehicleDetails")
                        .WithMany()
                        .HasForeignKey("vehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerProfile");

                    b.Navigation("VehicleDetails");

                    b.Navigation("VehicleServiceRecieveDelivery");
                });

            modelBuilder.Entity("ServiceCenterReception.Entity.VehicleServiceTaskCompletedList", b =>
                {
                    b.HasOne("ServiceCenterReception.Entity.VehicleServiceDetail", "VehicleServiceDetail")
                        .WithMany()
                        .HasForeignKey("vehicleServiceDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleServiceDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
